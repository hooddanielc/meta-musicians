From d55575c62bd911e1edf126e1efed8219c97bb25a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Andreas=20M=C3=BCller?= <schnitzeltony@gmail.com>
Date: Wed, 10 Oct 2018 23:48:22 +0200
Subject: [PATCH 1/3] Fluidsynths: Ensure fluidsynth's defaults are set once
 and in one place
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This makes transition fluidsynth 1.x -> 2.x a lot easier.

Upstream-Status: Submitted [1]

[1] https://github.com/falkTX/Carla/pull/766

Signed-off-by: Andreas MÃ¼ller <schnitzeltony@gmail.com>
---
 source/backend/plugin/CarlaPluginFluidSynth.cpp | 67 ++++++++++++++++++-------
 1 file changed, 48 insertions(+), 19 deletions(-)

diff --git a/source/backend/plugin/CarlaPluginFluidSynth.cpp b/source/backend/plugin/CarlaPluginFluidSynth.cpp
index be9e720a..7f6d919c 100644
--- a/source/backend/plugin/CarlaPluginFluidSynth.cpp
+++ b/source/backend/plugin/CarlaPluginFluidSynth.cpp
@@ -73,20 +73,22 @@ public:
         fSynth = new_fluid_synth(fSettings);
         CARLA_SAFE_ASSERT_RETURN(fSynth != nullptr,);
 
+        initializeFluidDefaultsIfNeeded();
+
         fluid_synth_set_sample_rate(fSynth, (float)pData->engine->getSampleRate());
 
         // set default values
         fluid_synth_set_reverb_on(fSynth, 1);
-        fluid_synth_set_reverb(fSynth, FLUID_REVERB_DEFAULT_ROOMSIZE, FLUID_REVERB_DEFAULT_DAMP, FLUID_REVERB_DEFAULT_WIDTH, FLUID_REVERB_DEFAULT_LEVEL);
+        fluid_synth_set_reverb(fSynth, sFluidDefaults[FluidSynthReverbRoomSize], sFluidDefaults[FluidSynthReverbDamp], sFluidDefaults[FluidSynthReverbWidth], sFluidDefaults[FluidSynthReverbLevel]);
 
         fluid_synth_set_chorus_on(fSynth, 1);
-        fluid_synth_set_chorus(fSynth, FLUID_CHORUS_DEFAULT_N, FLUID_CHORUS_DEFAULT_LEVEL, FLUID_CHORUS_DEFAULT_SPEED, FLUID_CHORUS_DEFAULT_DEPTH, FLUID_CHORUS_DEFAULT_TYPE);
+        fluid_synth_set_chorus(fSynth, sFluidDefaults[FluidSynthChorusNr], sFluidDefaults[FluidSynthChorusLevel], sFluidDefaults[FluidSynthChorusSpeedHz], sFluidDefaults[FluidSynthChorusDepthMs], sFluidDefaults[FluidSynthChorusType]);
 
         fluid_synth_set_polyphony(fSynth, FLUID_DEFAULT_POLYPHONY);
         fluid_synth_set_gain(fSynth, 1.0f);
 
         for (int i=0; i < MAX_MIDI_CHANNELS; ++i)
-            fluid_synth_set_interp_method(fSynth, i, FLUID_INTERP_DEFAULT);
+            fluid_synth_set_interp_method(fSynth, i, sFluidDefaults[FluidSynthInterpolation]);
     }
 
     ~CarlaPluginFluidSynth() override
@@ -195,7 +197,7 @@ public:
             case 1:
                 return FLUID_CHORUS_MOD_TRIANGLE;
             default:
-                return FLUID_CHORUS_DEFAULT_TYPE;
+                return sFluidDefaults[FluidSynthChorusType];
             }
         case FluidSynthInterpolation:
             switch (scalePointId)
@@ -209,7 +211,7 @@ public:
             case 3:
                 return FLUID_INTERP_7THORDER;
             default:
-                return FLUID_INTERP_DEFAULT;
+                return sFluidDefaults[FluidSynthInterpolation];
             }
         default:
             return 0.0f;
@@ -721,7 +723,7 @@ public:
             pData->param.data[j].rindex = j;
             pData->param.ranges[j].min = 0.0f;
             pData->param.ranges[j].max = 1.0f;
-            pData->param.ranges[j].def = 1.0f;
+            pData->param.ranges[j].def = sFluidDefaults[j];
             pData->param.ranges[j].step = 1.0f;
             pData->param.ranges[j].stepSmall = 1.0f;
             pData->param.ranges[j].stepLarge = 1.0f;
@@ -734,7 +736,7 @@ public:
             pData->param.data[j].rindex = j;
             pData->param.ranges[j].min = 0.0f;
             pData->param.ranges[j].max = 1.2f;
-            pData->param.ranges[j].def = FLUID_REVERB_DEFAULT_ROOMSIZE;
+            pData->param.ranges[j].def = sFluidDefaults[j];
             pData->param.ranges[j].step = 0.01f;
             pData->param.ranges[j].stepSmall = 0.0001f;
             pData->param.ranges[j].stepLarge = 0.1f;
@@ -747,7 +749,7 @@ public:
             pData->param.data[j].rindex = j;
             pData->param.ranges[j].min = 0.0f;
             pData->param.ranges[j].max = 1.0f;
-            pData->param.ranges[j].def = FLUID_REVERB_DEFAULT_DAMP;
+            pData->param.ranges[j].def = sFluidDefaults[j];
             pData->param.ranges[j].step = 0.01f;
             pData->param.ranges[j].stepSmall = 0.0001f;
             pData->param.ranges[j].stepLarge = 0.1f;
@@ -761,7 +763,7 @@ public:
             pData->param.data[j].midiCC = MIDI_CONTROL_REVERB_SEND_LEVEL;
             pData->param.ranges[j].min = 0.0f;
             pData->param.ranges[j].max = 1.0f;
-            pData->param.ranges[j].def = FLUID_REVERB_DEFAULT_LEVEL;
+            pData->param.ranges[j].def = sFluidDefaults[j];
             pData->param.ranges[j].step = 0.01f;
             pData->param.ranges[j].stepSmall = 0.0001f;
             pData->param.ranges[j].stepLarge = 0.1f;
@@ -774,7 +776,7 @@ public:
             pData->param.data[j].rindex = j;
             pData->param.ranges[j].min = 0.0f;
             pData->param.ranges[j].max = 10.0f; // should be 100, but that sounds too much
-            pData->param.ranges[j].def = FLUID_REVERB_DEFAULT_WIDTH;
+            pData->param.ranges[j].def = sFluidDefaults[j];
             pData->param.ranges[j].step = 0.01f;
             pData->param.ranges[j].stepSmall = 0.0001f;
             pData->param.ranges[j].stepLarge = 0.1f;
@@ -787,7 +789,7 @@ public:
             pData->param.data[j].rindex = j;
             pData->param.ranges[j].min = 0.0f;
             pData->param.ranges[j].max = 1.0f;
-            pData->param.ranges[j].def = 1.0f;
+            pData->param.ranges[j].def = sFluidDefaults[j];
             pData->param.ranges[j].step = 1.0f;
             pData->param.ranges[j].stepSmall = 1.0f;
             pData->param.ranges[j].stepLarge = 1.0f;
@@ -800,7 +802,7 @@ public:
             pData->param.data[j].rindex = j;
             pData->param.ranges[j].min = 0.0f;
             pData->param.ranges[j].max = 99.0f;
-            pData->param.ranges[j].def = FLUID_CHORUS_DEFAULT_N;
+            pData->param.ranges[j].def = sFluidDefaults[j];
             pData->param.ranges[j].step = 1.0f;
             pData->param.ranges[j].stepSmall = 1.0f;
             pData->param.ranges[j].stepLarge = 10.0f;
@@ -813,7 +815,7 @@ public:
             pData->param.data[j].rindex = j;
             pData->param.ranges[j].min = 0.0f;
             pData->param.ranges[j].max = 10.0f;
-            pData->param.ranges[j].def = FLUID_CHORUS_DEFAULT_LEVEL;
+            pData->param.ranges[j].def = sFluidDefaults[j];
             pData->param.ranges[j].step = 0.01f;
             pData->param.ranges[j].stepSmall = 0.0001f;
             pData->param.ranges[j].stepLarge = 0.1f;
@@ -826,7 +828,7 @@ public:
             pData->param.data[j].rindex = j;
             pData->param.ranges[j].min = 0.29f;
             pData->param.ranges[j].max = 5.0f;
-            pData->param.ranges[j].def = FLUID_CHORUS_DEFAULT_SPEED;
+            pData->param.ranges[j].def = sFluidDefaults[j];
             pData->param.ranges[j].step = 0.01f;
             pData->param.ranges[j].stepSmall = 0.0001f;
             pData->param.ranges[j].stepLarge = 0.1f;
@@ -839,7 +841,7 @@ public:
             pData->param.data[j].rindex = j;
             pData->param.ranges[j].min = 0.0f;
             pData->param.ranges[j].max = float(2048.0 * 1000.0 / pData->engine->getSampleRate()); // FIXME?
-            pData->param.ranges[j].def = FLUID_CHORUS_DEFAULT_DEPTH;
+            pData->param.ranges[j].def = sFluidDefaults[j];
             pData->param.ranges[j].step = 0.01f;
             pData->param.ranges[j].stepSmall = 0.0001f;
             pData->param.ranges[j].stepLarge = 0.1f;
@@ -852,7 +854,7 @@ public:
             pData->param.data[j].rindex = j;
             pData->param.ranges[j].min = FLUID_CHORUS_MOD_SINE;
             pData->param.ranges[j].max = FLUID_CHORUS_MOD_TRIANGLE;
-            pData->param.ranges[j].def = FLUID_CHORUS_DEFAULT_TYPE;
+            pData->param.ranges[j].def = sFluidDefaults[j];
             pData->param.ranges[j].step = 1.0f;
             pData->param.ranges[j].stepSmall = 1.0f;
             pData->param.ranges[j].stepLarge = 1.0f;
@@ -865,7 +867,7 @@ public:
             pData->param.data[j].rindex = j;
             pData->param.ranges[j].min = 1.0f;
             pData->param.ranges[j].max = 512.0f; // max theoric is 65535
-            pData->param.ranges[j].def = (float)fluid_synth_get_polyphony(fSynth);
+            pData->param.ranges[j].def = sFluidDefaults[j];
             pData->param.ranges[j].step = 1.0f;
             pData->param.ranges[j].stepSmall = 1.0f;
             pData->param.ranges[j].stepLarge = 10.0f;
@@ -878,7 +880,7 @@ public:
             pData->param.data[j].rindex = j;
             pData->param.ranges[j].min = FLUID_INTERP_NONE;
             pData->param.ranges[j].max = FLUID_INTERP_HIGHEST;
-            pData->param.ranges[j].def = FLUID_INTERP_DEFAULT;
+            pData->param.ranges[j].def = sFluidDefaults[j];
             pData->param.ranges[j].step = 1.0f;
             pData->param.ranges[j].stepSmall = 1.0f;
             pData->param.ranges[j].stepLarge = 1.0f;
@@ -891,7 +893,7 @@ public:
             pData->param.data[j].rindex = j;
             pData->param.ranges[j].min = 0.0f;
             pData->param.ranges[j].max = 65535.0f;
-            pData->param.ranges[j].def = 0.0f;
+            pData->param.ranges[j].def = sFluidDefaults[j];
             pData->param.ranges[j].step = 1.0f;
             pData->param.ranges[j].stepSmall = 1.0f;
             pData->param.ranges[j].stepLarge = 1.0f;
@@ -1656,6 +1658,27 @@ public:
     }
 
 private:
+    void initializeFluidDefaultsIfNeeded()
+    {
+        if (sFluidDefaultsStored)
+            return;
+        sFluidDefaultsStored = true;
+        sFluidDefaults[FluidSynthReverbOnOff] = 1.0f;
+        sFluidDefaults[FluidSynthReverbRoomSize] = FLUID_REVERB_DEFAULT_ROOMSIZE;
+        sFluidDefaults[FluidSynthReverbDamp] = FLUID_REVERB_DEFAULT_DAMP;
+        sFluidDefaults[FluidSynthReverbLevel] = FLUID_REVERB_DEFAULT_LEVEL;
+        sFluidDefaults[FluidSynthReverbWidth] = FLUID_REVERB_DEFAULT_WIDTH;
+        sFluidDefaults[FluidSynthChorusOnOff] = 1.0f;
+        sFluidDefaults[FluidSynthChorusNr] = FLUID_CHORUS_DEFAULT_N;
+        sFluidDefaults[FluidSynthChorusLevel] = FLUID_CHORUS_DEFAULT_LEVEL;
+        sFluidDefaults[FluidSynthChorusSpeedHz] = FLUID_CHORUS_DEFAULT_SPEED;
+        sFluidDefaults[FluidSynthChorusDepthMs] = FLUID_CHORUS_DEFAULT_DEPTH;
+        sFluidDefaults[FluidSynthChorusType] = FLUID_CHORUS_DEFAULT_TYPE;
+        sFluidDefaults[FluidSynthPolyphony] = (float)fluid_synth_get_polyphony(fSynth);
+        sFluidDefaults[FluidSynthInterpolation] = FLUID_INTERP_DEFAULT;
+        sFluidDefaults[FluidSynthVoiceCount] = 0.0f;
+    }
+
     enum FluidSynthParameters {
         FluidSynthReverbOnOff    = 0,
         FluidSynthReverbRoomSize = 1,
@@ -1683,6 +1706,9 @@ private:
     float** fAudio16Buffers;
     float   fParamBuffers[FluidSynthParametersMax];
 
+    static bool  sFluidDefaultsStored;
+    static float sFluidDefaults[FluidSynthParametersMax];
+
     int32_t fCurMidiProgs[MAX_MIDI_CHANNELS];
 
     const char* fLabel;
@@ -1690,6 +1716,9 @@ private:
     CARLA_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(CarlaPluginFluidSynth)
 };
 
+bool CarlaPluginFluidSynth::sFluidDefaultsStored = false;
+float CarlaPluginFluidSynth::sFluidDefaults[FluidSynthParametersMax];
+
 CARLA_BACKEND_END_NAMESPACE
 
 #endif // HAVE_FLUIDSYNTH
-- 
2.14.4

